extends layout

block content
    style.
        /* Sticky Header Styles */
        .sticky-header-container {
            position: sticky;
            top: 0;
            z-index: 1020;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .filter-section-expanded {
            background: #343a40;
            padding: 15px;
        }
        
        .filter-header h6 {
            color: #ffffff;
            font-weight: 600;
            margin: 0;
        }
        
        .filter-content-expanded {
            background: white;
            padding: 20px;
            border: 1px solid #dee2e6;
            border-top: none;
        }
        
        .table-responsive {
            max-height: calc(100vh - 400px);
            overflow-y: auto;
        }
        
        thead.sticky-top {
            position: sticky;
            top: 0;
            z-index: 10;
            background: white;
        }
        
        /* Mobile styles */
        @media (max-width: 991.98px) {
            .filter-section-expanded {
                display: none !important;
            }
        }
        
        @media (min-width: 992px) {
            .mobile-filter {
                display: none !important;
            }
        }

    // Desktop: Sticky Header with Filters
    .sticky-header-container.d-none.d-lg-block
        .container-fluid
            .filter-section-expanded
                .filter-header
                    h6.mb-0 Bank Statement Filters
                .filter-content-expanded
                    form(method='GET' action='/bank-statement' id='filterForm')
                        .form-row
                            .col-md-2
                                label(for='dateRange') Date Range:
                                select#dateRange.form-control(onchange="updateDateRange()")
                                    option(value='today') Today
                                    option(value='yesterday') Yesterday
                                    option(value='this_week') This Week
                                    option(value='this_month') This Month
                                    option(value='last_month') Last Month
                                    option(value='this_financial_year') This Financial Year
                                    option(value='last_financial_year') Last Financial Year
                                    option(value='custom', selected=true) Custom Date
                            
                            .col-md-2
                                label(for='fromclosingDate') From Date:
                                input#fromclosingDate.form-control(type='date' name='tbankfromDate' value=fromDate max=currentDate required)

                            .col-md-2
                                label(for='toclosingDate') To Date:
                                input#toclosingDate.form-control(type='date' name='tbanktoDate' value=toDate max=currentDate required)
                            
                            .col-md-3
                                label(for='bank_id') Bank Account:
                                select#bank_id.form-control(name='bank_id' onchange='loadLedgersForBank()')
                                    option(value=0) All Accounts
                                    if accountList
                                        each account in accountList
                                            option(value=account.bank_id selected=(account.bank_id == bankId))= account.account_nickname
                            
                            .col-md-3
                                label(for='searchInput') Live Search:
                                input#searchInput.form-control(type='text' placeholder='Search transactions...' oninput='liveSearchTransactions()')
                        
                        .form-row.mt-2
                            .col-md-12.d-flex.justify-content-between.align-items-center
                                small.text-muted Found: <span id='resultCount'>#{transactionList ? transactionList.length : 0}</span> transactions
                                button.btn.btn-primary(type='submit') Go

    // Mobile: Simple Filter
    .mobile-filter.d-lg-none.p-3
        form(method='GET' action='/bank-statement')
            .form-group
                label Date Range:
                select#dateRangeMobile.form-control(onchange="updateDateRangeMobile()")
                    option(value='today') Today
                    option(value='yesterday') Yesterday
                    option(value='this_week') This Week
                    option(value='this_month') This Month
                    option(value='last_month') Last Month
                    option(value='this_financial_year') This Financial Year
                    option(value='last_financial_year') Last Financial Year
                    option(value='custom', selected=true) Custom Date
            
            .form-group
                label From Date:
                input#fromclosingDateMobile.form-control(type='date' name='tbankfromDate' value=fromDate max=currentDate required)

            .form-group
                label To Date:
                input#toclosingDateMobile.form-control(type='date' name='tbanktoDate' value=toDate max=currentDate required)
            
            .form-group
                label Bank Account:
                select.form-control(name='bank_id')
                    option(value=0) All Accounts
                    if accountList
                        each account in accountList
                            option(value=account.bank_id selected=(account.bank_id == bankId))= account.account_nickname
            
            button.btn.btn-primary.btn-block(type='submit') Go

    // Main Content
    .container-fluid.mt-3
        form(method='POST' action='/bank-statement' id='transactionForm')
            input(type='hidden' name='tbank_fromDate_hiddenValue' value=fromDate)
            input(type='hidden' name='tbank_toDate_hiddenValue' value=toDate)
            input(type='hidden' name='bank_id' value=bankId)
            
            .table-responsive
                table#transactionsTable.table.table-bordered.table-hover.table-sm
                    thead.thead-light.sticky-top
                        tr
                            th Transaction Date
                            if accountList && accountList.length > 1
                                th Account
                            th Ledger Name
                            th Debit Amount
                            th Credit Amount
                            th Remarks
                            th Delete
                    
                    tbody#transaction-rows
                        if transactionList && transactionList.length > 0
                            each val, index in transactionList
                                tr(id='transaction_row_'+index data-search-text=(val.trans_date + ' ' + val.account_nickname + ' ' + val.ledger_name + ' ' + val.remarks))
                                    td= val.trans_date
                                    if accountList && accountList.length > 1
                                        td= val.account_nickname
                                    td= val.ledger_name
                                    td.text-right= val.debit_amount && val.debit_amount !== null ? parseFloat(val.debit_amount).toFixed(2) : '-'
                                    td.text-right= val.credit_amount && val.credit_amount !== null ? parseFloat(val.credit_amount).toFixed(2) : '-'
                                    td= val.remarks
                                    td.text-center
                                        if val.closed_flag === 'N' || !val.closed_flag
                                            button.btn.btn-sm.btn-danger(type='button' onclick='deleteTransaction('+val.t_bank_id+')')
                                                i.oi.oi-trash
                                        else
                                            span.text-muted Closed
                        
                        // New transaction entry row
                        tr#new-transaction-row
                            td
                                input.form-control.form-control-sm(type='date' name='trans_date_0' id='trans_date_0' max=currentDate required)
                            if accountList && accountList.length > 1
                                td
                                    select.form-control.form-control-sm(name='bank_id_0' id='bank_id_0' onchange='loadLedgersForNewRow()' required)
                                        option(value='') Select Account
                                        if accountList
                                            each account in accountList
                                                option(value=account.bank_id)= account.account_nickname
                            else if accountList && accountList.length === 1
                                // Hidden input when only one account exists
                                input(type='hidden' name='bank_id_0' id='bank_id_0' value=accountList[0].bank_id)
                            td
                                select.form-control.form-control-sm(name='ledger_name_0' id='ledger_name_0' required disabled)
                                    option(value='') Select Ledger
                            td
                                input.form-control.form-control-sm.text-right(type='number' name='debitamount_0' id='debitamount_0' step='0.01' min='0' placeholder='0.00' oninput='validateCreditDebit(0)')
                            td
                                input.form-control.form-control-sm.text-right(type='number' name='creditamount_0' id='creditamount_0' step='0.01' min='0' placeholder='0.00' oninput='validateCreditDebit(0)')
                            td
                                input.form-control.form-control-sm(type='text' name='remarks_0' id='remarks_0' maxlength='1000')
                            td.text-center
                                button.btn.btn-sm.btn-danger(type='button' onclick='removeRow(0)' disabled)
                                    i.oi.oi-trash    
            div(align="center")
                button.btn.btn-info(type="button", id="bank-statement-add-new", onclick="addMoreRows()", title="Add new transaction row") Add New
                span &nbsp;&nbsp;&nbsp;&nbsp;
                button.btn.btn-primary(type="submit", id="bank-statement-save") Save               
    script.
        const currentDate = '#{currentDate}';        
        let transactionRowCounter = 1;        
        const accountList = !{JSON.stringify(accountList || [])};
        const showAccountColumn = accountList && accountList.length > 1;

        console.log('accountList:', accountList);
        console.log('showAccountColumn:', showAccountColumn);
  
        window.updateDateRangeMobile = function() {
            const mobileFrom = document.getElementById('fromclosingDateMobile');
            const mobileTo = document.getElementById('toclosingDateMobile');
            
            mobileFrom.id = 'fromclosingDate';
            mobileTo.id = 'toclosingDate';
            
            updateDateRange();
            
            mobileFrom.id = 'fromclosingDateMobile';
            mobileTo.id = 'toclosingDateMobile';
        }

        window.liveSearchTransactions = function() {
            const searchValue = document.getElementById('searchInput').value.toLowerCase();
            const rows = document.querySelectorAll('#transaction-rows tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const searchText = row.getAttribute('data-search-text');
                if (searchText && searchText.toLowerCase().includes(searchValue)) {
                    row.style.display = '';
                    visibleCount++;
                } else if (searchText) {
                    row.style.display = 'none';
                }
            });
            
            document.getElementById('resultCount').textContent = visibleCount;
        }
        
        window.deleteTransaction = function(tBankId) {
            if (!confirm('Are you sure you want to delete this transaction?')) {
                return;
            }
            
            fetch(`/bank-statement/${tBankId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert('Transaction deleted successfully');
                    location.reload();
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to delete transaction');
            });
        }

        window.loadLedgersForBank = function() {
            const bankId = document.getElementById('bank_id').value;
            console.log('Selected bank:', bankId);
        }

        window.loadLedgersForNewRow = function() {
            const bankId = document.getElementById('bank_id_0').value;
            const ledgerSelect = document.getElementById('ledger_name_0');
            
            if (!bankId) {
                ledgerSelect.disabled = true;
                ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                document.getElementById('debitamount_0').disabled = false;
                document.getElementById('creditamount_0').disabled = false;
                return;
            }
            
            fetch(`/bank-statement/ledgers?bank_id=${bankId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                        data.ledgers.forEach(ledger => {
                            const option = document.createElement('option');
                            option.value = ledger.ledger_name;
                            option.textContent = ledger.ledger_display_name;
                            option.setAttribute('data-entry-type', ledger.allowed_entry_type);
                            ledgerSelect.appendChild(option);
                        });
                        ledgerSelect.disabled = false;
                        
                        ledgerSelect.onchange = function() {
                            handleLedgerChange(0);
                        };
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        window.handleLedgerChange = function(rowIndex) {
            const ledgerSelect = document.getElementById(`ledger_name_${rowIndex}`);
            const selectedOption = ledgerSelect.options[ledgerSelect.selectedIndex];
            const allowedType = selectedOption.getAttribute('data-entry-type');
            
            const debitField = document.getElementById(`debitamount_${rowIndex}`);
            const creditField = document.getElementById(`creditamount_${rowIndex}`);
            
            debitField.value = '';
            creditField.value = '';
            
            if (allowedType === 'DEBIT') {
                debitField.disabled = false;
                creditField.disabled = true;
            } else if (allowedType === 'CREDIT') {
                debitField.disabled = true;
                creditField.disabled = false;
            } else {
                debitField.disabled = false;
                creditField.disabled = false;
            }
        }

        window.validateCreditDebit = function(rowIndex) {
            const debit = document.getElementById(`debitamount_${rowIndex}`);
            const credit = document.getElementById(`creditamount_${rowIndex}`);
            const ledgerSelect = document.getElementById(`ledger_name_${rowIndex}`);
            
            const debitValue = parseFloat(debit.value) || 0;
            const creditValue = parseFloat(credit.value) || 0;
            
            const selectedOption = ledgerSelect.options[ledgerSelect.selectedIndex];
            const allowedType = selectedOption.getAttribute('data-entry-type');
            
            if (allowedType === 'BOTH') {
                if (debitValue > 0) {
                    credit.disabled = true;
                    credit.value = '';
                } else if (creditValue > 0) {
                    debit.disabled = true;
                    debit.value = '';
                } else {
                    debit.disabled = false;
                    credit.disabled = false;
                }
            }
            
            return true;
        }

        window.addMoreRows = function() {
            const existingNewRows = document.querySelectorAll('tr[id^="new-transaction-row"]');
            if (existingNewRows.length >= 5) {
                alert('Maximum 5 transactions can be added at once. Please save before adding more.');
                return;
            }
            
            const tbody = document.getElementById('transaction-rows');
            const newRow = document.createElement('tr');
            newRow.id = `new-transaction-row-${transactionRowCounter}`;
            
            const bankSelect = document.getElementById('bank_id_0');
            const autoSelectBank = (bankSelect && bankSelect.tagName === 'SELECT' && bankSelect.options.length === 2) || (accountList && accountList.length === 1);
            const selectedBankId = autoSelectBank ? (bankSelect && bankSelect.tagName === 'SELECT' ? bankSelect.options[1].value : (accountList && accountList[0] ? accountList[0].bank_id : '')) : '';
            
            const tooltip = (accountList && accountList.length === 1 && accountList[0]) ?
                `Account: ${accountList[0].account_nickname}` : '';
            
            let accountCell = '';
            if (showAccountColumn) {
                accountCell = `
                    <td>
                        <select class="form-control form-control-sm" name="bank_id_${transactionRowCounter}" id="bank_id_${transactionRowCounter}" onchange="loadLedgersForRow(${transactionRowCounter})" required>
                            <option value="">Select Account</option>
                            ${accountList.map(acc => `<option value="${acc.bank_id}">${acc.account_nickname}</option>`).join('')}
                        </select>
                    </td>`;
            } else if (accountList && accountList.length === 1) {
                accountCell = `<input type="hidden" name="bank_id_${transactionRowCounter}" id="bank_id_${transactionRowCounter}" value="${accountList[0].bank_id}">`;
            }
            
            newRow.innerHTML = `
                <td>
                    <input class="form-control form-control-sm" type="date" name="trans_date_${transactionRowCounter}" id="trans_date_${transactionRowCounter}" max="${currentDate}" required>
                </td>
                ${accountCell}
                <td>
                    <select class="form-control form-control-sm" name="ledger_name_${transactionRowCounter}" id="ledger_name_${transactionRowCounter}" required ${autoSelectBank ? '' : 'disabled'}>
                        <option value="">Select Ledger</option>
                    </select>
                </td>
                <td>
                    <input class="form-control form-control-sm text-right" type="number" name="debitamount_${transactionRowCounter}" id="debitamount_${transactionRowCounter}" step="0.01" min="0" placeholder="0.00" oninput="validateCreditDebit(${transactionRowCounter})">
                </td>
                <td>
                    <input class="form-control form-control-sm text-right" type="number" name="creditamount_${transactionRowCounter}" id="creditamount_${transactionRowCounter}" step="0.01" min="0" placeholder="0.00" oninput="validateCreditDebit(${transactionRowCounter})">
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" name="remarks_${transactionRowCounter}" id="remarks_${transactionRowCounter}" maxlength="1000">
                </td>
                <td class="text-center">
                    <button class="btn btn-sm btn-danger" type="button" onclick="removeRow(${transactionRowCounter})">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            `;
            
            newRow.setAttribute('title', tooltip);
            tbody.appendChild(newRow);
            
            if (autoSelectBank) {
                if (showAccountColumn) {
                    loadLedgersForRow(transactionRowCounter);
                } else if (accountList && accountList.length === 1 && accountList[0]) {
                    const bankId = accountList[0].bank_id;
                    const ledgerSelect = document.getElementById(`ledger_name_${transactionRowCounter}`);
                    
                    fetch(`/bank-statement/ledgers?bank_id=${bankId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                                data.ledgers.forEach(ledger => {
                                    const option = document.createElement('option');
                                    option.value = ledger.ledger_name;
                                    option.textContent = ledger.ledger_display_name;
                                    option.setAttribute('data-entry-type', ledger.allowed_entry_type);
                                    ledgerSelect.appendChild(option);
                                });
                                ledgerSelect.disabled = false;
                                
                                ledgerSelect.onchange = function() {
                                    handleLedgerChange(transactionRowCounter);
                                };
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            }
            
            transactionRowCounter++;
        }

        window.loadLedgersForRow = function(rowIndex) {
            const bankSelect = document.getElementById(`bank_id_${rowIndex}`);
            const ledgerSelect = document.getElementById(`ledger_name_${rowIndex}`);
            
            if (!bankSelect || !ledgerSelect) return;
            
            const bankId = bankSelect.value;
            
            if (!bankId) {
                ledgerSelect.disabled = true;
                ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                return;
            }
            
            fetch(`/bank-statement/ledgers?bank_id=${bankId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                        data.ledgers.forEach(ledger => {
                            const option = document.createElement('option');
                            option.value = ledger.ledger_name;
                            option.textContent = ledger.ledger_display_name;
                            option.setAttribute('data-entry-type', ledger.allowed_entry_type);
                            ledgerSelect.appendChild(option);
                        });
                        ledgerSelect.disabled = false;
                        
                        ledgerSelect.onchange = function() {
                            handleLedgerChange(rowIndex);
                        };
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
        
        window.removeRow = function(index) {
            const row = document.getElementById('new-transaction-row-' + index) || document.getElementById('new-transaction-row');
            if (row && index > 0) {
                row.remove();
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            if (accountList && accountList.length === 1) {
                const bankId = accountList[0].bank_id;
                const ledgerSelect = document.getElementById('ledger_name_0');
                
                if (ledgerSelect) {
                    fetch(`/bank-statement/ledgers?bank_id=${bankId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                ledgerSelect.innerHTML = '<option value="">Select Ledger</option>';
                                data.ledgers.forEach(ledger => {
                                    const option = document.createElement('option');
                                    option.value = ledger.ledger_name;
                                    option.textContent = ledger.ledger_display_name;
                                    option.setAttribute('data-entry-type', ledger.allowed_entry_type);
                                    ledgerSelect.appendChild(option);
                                });
                                ledgerSelect.disabled = false;
                                
                                ledgerSelect.onchange = function() {
                                    handleLedgerChange(0);
                                };
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            }
        });

        document.getElementById('transactionForm').addEventListener('submit', function(e) {
            const newRows = document.querySelectorAll('tr[id^="new-transaction-row"]');
            
            if (newRows.length === 0) {
                e.preventDefault();
                alert('No transactions to save');
                return;
            }
            
            for (let row of newRows) {
                const rowId = row.id.split('-').pop();
                const index = rowId === 'row' ? '0' : rowId;
                
                const debit = parseFloat(document.getElementById(`debitamount_${index}`).value) || 0;
                const credit = parseFloat(document.getElementById(`creditamount_${index}`).value) || 0;
                
                if (debit === 0 && credit === 0) {
                    e.preventDefault();
                    alert('Each row must have either a debit or credit amount');
                    return;
                }
            }
        });
